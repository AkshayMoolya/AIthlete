datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  password      String? // For credentials authentication
  role          String          @default("USER") // User role
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  // New fitness-related fields
  preferredUnit String @default("kg") // "kg" or "lbs"

  // Relations
  workouts     Workout[]
  programs     Program[]
  chatSessions ChatSession[]
  goals        Goal[] // Add relation to goals

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Exercise {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  category     String // "Chest", "Back", "Legs", etc.
  equipment    String // "Barbell", "Dumbbell", "Bodyweight", etc.
  description  String?
  instructions String?
  muscleGroups String[] // Array of muscle groups

  // Relations
  workoutExercises WorkoutExercise[]
  exerciseLogs     ExerciseLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Workout {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  description       String?
  isPublic          Boolean  @default(false)
  estimatedDuration Int? // in minutes
  tags              String[] // Array of tags

  // Relations
  userId    String            @db.ObjectId
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercises WorkoutExercise[]
  sessions  WorkoutSession[]
  programs  ProgramWorkout[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isPublic])
  @@index([userId])
}

model WorkoutExercise {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Relations
  workoutId  String   @db.ObjectId
  workout    Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  exerciseId String   @db.ObjectId
  exercise   Exercise @relation(fields: [exerciseId], references: [id])

  // Exercise configuration
  order    Int
  sets     Int
  reps     Int[] // Changed from Int[]? to Int[]
  weight   Float?
  restTime Int? // in seconds
  notes    String?

  // Auto-progression settings
  autoIncrease          Boolean @default(false)
  increaseAmount        Float?
  increaseAfterSessions Int     @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Program {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  duration    Int // in weeks
  difficulty  String   @default("Beginner")
  isPublic    Boolean  @default(false)
  tags        String[]

  // Relations
  userId   String           @db.ObjectId
  user     User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  workouts ProgramWorkout[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isPublic])
  @@index([userId])
}

model ProgramWorkout {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Relations
  programId String  @db.ObjectId
  program   Program @relation(fields: [programId], references: [id], onDelete: Cascade)
  workoutId String  @db.ObjectId
  workout   Workout @relation(fields: [workoutId], references: [id])

  // Schedule
  weekNumber Int
  dayOfWeek  Int // 1-7 (Monday-Sunday)
  order      Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WorkoutSession {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Relations
  userId    String  @db.ObjectId
  workoutId String  @db.ObjectId
  workout   Workout @relation(fields: [workoutId], references: [id])

  // Session data
  startTime DateTime
  endTime   DateTime?
  completed Boolean   @default(false)
  notes     String?

  // Exercise logs
  exerciseLogs ExerciseLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model ExerciseLog {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Relations
  sessionId  String         @db.ObjectId
  session    WorkoutSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  exerciseId String         @db.ObjectId
  exercise   Exercise       @relation(fields: [exerciseId], references: [id])

  // Performance data
  sets     Int
  reps     Int[]
  weight   Float[]
  restTime Int[]
  notes    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChatSession {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Relations
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  title    String?
  messages ChatMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model ChatMessage {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Relations
  sessionId String      @db.ObjectId
  session   ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  role    String // "user" or "assistant"
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Add Goal model
model Goal {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @db.ObjectId
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  name          String
  targetValue   Float
  currentValue  Float     @default(0)
  type          String // "weight", "consistency", "performance", etc.
  status        String    @default("active") // "active", "completed", "abandoned"
  deadline      DateTime?
  startDate     DateTime  @default(now())
  completedDate DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}
